[
  {
    "title": "SyncTube",
    "name": "SyncTube",
    "image": "littlestache/synctube",
    "description": " DESCRIPTION Synchronized video viewing with chat and other features. Lightweight modern implementation and very easy way to run locally.\n\n    Supported players: • Youtube (videos, streams and playlists) • RAW MP4 videos and M3U8 playlists (or any other media format supported in browser) • Iframes (without sync)\n\n    How to use?\n\n        Login with any nickname.\n        Add your video url with \"plus\" button below (youtube or direct link to mp4 for example).\n        Now it plays and syncs for all page users.\n        You can click \"leader\" button to get access to global video controls (play/pause, time setting, playback speed).\n        If you want to restrict permissions or add admins/emotes, see Configuration section.\n\n    Live demo: https://synctube-example.herokuapp.com/\n\n    NOTES • Run the following cmds before building the container: 'mkdir -m755 /mnt/user/appdata/synctube' and 'curl https://raw.githubusercontent.com/SmartPhoneLover/unraid-docker-templates/main/templates/dependencies/synctube/config.json --output /mnt/user/appdata/synctube/config.json'. • There's a Android client to connect to the server: 'https://github.com/RblSb/SyncTubeApp', but you will have to compile it yourself. • Extra files (state.json, users.json) and directories (/crashes, /logs) will be generated inside '/../appdata/synctube/ dir, once launched. If you don't want them to be publicly available, change the Path settings from RW (read-write) to RO (read-only).\n\n    VERSION 1.0 (2022-02-03)\n",
    "categories": [
      "Media"
    ],
    "platform": "linux",
    "restart_policy": "unless-stopped",
    "ports": [
      "4200:4200/tcp"
    ],
    "volumes": [
      {
        "container": "/usr/src/app/user",
        "bind": "/docker/synctube/"
      }
    ],
    "logo": "https://raw.githubusercontent.com/SmartPhoneLover/unraid-docker-templates/main/templates/icons/synctube.png",
    "network_mode": "bridge",
    "type": 1
  },
  {
    "title": "vaultwarden",
    "name": "vaultwarden",
    "image": "vaultwarden/server:latest",
    "description": "This is a Bitwarden server API implementation written in Rust compatible with upstream Bitwarden clients*, perfect for self-hosted deployment where running the official resource-heavy service might not be ideal.",
    "categories": [
      "Tools ",
      "Other"
    ],
    "platform": "linux",
    "restart_policy": "unless-stopped",
    "ports": [
      "8080:80/tcp"
    ],
    "volumes": [
      {
        "container": "/config",
        "bind": "/docker/vaultwarden/"
      }
    ],
    "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/bitwarden.png",
    "network_mode": "bridge",
    "type": 1
  },
  {
    "title": "NginxProxyManager",
    "name": "NginxProxyManager",
    "image": "jc21/nginx-proxy-manager",
    "description": "Nginx Proxy Manager enables you to easily forward to your websites running at home or otherwise, including free SSL, without having to know too much about Nginx or Letsencrypt.\n\nUsername: admin@example.com\nPassword: changeme\nChange them before doing anything",
    "categories": [
      "Proxy ",
      "Tools"
    ],
    "platform": "linux",
    "restart_policy": "unless-stopped",
    "ports": [
      "80:80/tcp",
      "443:443/tcp",
      "81:81/tcp"
    ],
    "volumes": [
      {
        "container": "/data",
        "bind": "/docker/NginxProxyManager/data"
      },
      {
        "container": "/etc/letsencrypt",
        "bind": "/docker/NginxProxyManager/letsencrypt"
      }
    ],
    "env": [
      {
        "name": "DB_SQLITE_FILE",
        "default": "/data/database.sqlite",
        "label": "DB_SQLITE_FILE",
        "description": "Database"
      }
    ],
    "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/proxy_mgr.png",
    "network_mode": "bridge",
    "type": 1
  },
  {
    "title": "Firefox",
    "name": "Firefox",
    "image": "ich777/firefox",
    "description": "This container will download and install Firefox in the preferred version and language.\n\nUPDATE: The container will check on every restart if there is a newer version available.\n\nATTENTION: If you want to change the language, you have to delete every file in the 'firefox' directory except the 'profile' folder.\n\nRESOLUTION: You can also change the resolution from the WebGUI, to do that simply click on 'Show more settings...' (on a resolution change it can occour that the screen is not filled entirely with the Firefox window, simply restart the container and it will be fullscreen again).",
    "categories": [
      "tools",
      "web"
    ],
    "platform": "linux",
    "restart_policy": "on-failure",
    "ports": [
      "8282:8080/tcp"
    ],
    "volumes": [
      {
        "container": "/firefox",
        "bind": "/docker/firefox"
      }
    ],
    "env": [
      {
        "name": "FIREFOX_V",
        "default": "latest",
        "label": "FIREFOX_V",
        "description": "Enter your preferred version or 'latest' (without quotes) to grab the latest version."
      },
      {
        "name": "FIREFOX_LANG",
        "default": "en-US",
        "label": "FIREFOX_LANG",
        "description": "Enter your preferred language here (eg: 'en-US', 'de', 'fr', 'en-UK',... you can get a full list here: https://ftp.mozilla.org/pub/firefox/releases/latest/README.txt)"
      },
      {
        "name": "CUSTOM_RES_W",
        "default": "1280",
        "label": "CUSTOM_RES_W",
        "description": "Minimum screen width 1000 pixels"
      },
      {
        "name": "CUSTOM_RES_H",
        "default": "768",
        "label": "CUSTOM_RES_H",
        "description": "Minimum screen hight 880 pixels"
      },
      {
        "name": "EXTRA_PARAMETERS",
        "default": "",
        "label": "EXTRA_PARAMETERS",
        "description": "If needed enter extra startup parameters here otherwise leave empty."
      }
    ],
    "logo": "https://raw.githubusercontent.com/ich777/docker-templates/master/ich777/images/firefox.png",
    "network_mode": "bridge",
    "type": 1
  },
  {
    "title": "ombi",
    "name": "ombi",
    "image": "linuxserver/ombi",
    "description": "Ombi allows you to host your own Plex Request and user management system.",
    "categories": [
      "tools",
      "media"
    ],
    "platform": "linux",
    "restart_policy": "unless-stopped",
    "ports": [
      "3579:3579/tcp"
    ],
    "volumes": [
      {
        "container": "/config",
        "bind": "/docker/ombi"
      }
    ],
    "env": [
      {
        "name": "PUID",
        "default": "99",
        "label": "PUID",
        "description": "Key 1"
      },
      {
        "name": "PGID",
        "default": "100",
        "label": "PGID",
        "description": "Key 2"
      }
    ],
    "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/ombi-logo.png",
    "network_mode": "bridge",
    "type": 1
  },
  {
    "title": "Krusader",
    "name": "Krusader",
    "image": "ich777/krusader",
    "description": "Krusader is an advanced orthodox file manager for KDE and other desktops in the Unix world. It is similar to the console-based GNU Midnight Commander, GNOME Commander for the GNOME desktop environment, or Total Commander for Windows, all of which can trace their paradigmatic features to the original Norton Commander for DOS. It supports extensive archive handling, mounted filesystem support, FTP, advanced search, viewer/editor, directory synchronisation, file content comparisons, batch renaming, etc.\n\nLanguage Notice: Enter your prefered locales, you can find a full list of supported languages in: '/usr/share/i18n/SUPPORTED' simply open up a console from the Container and type in 'cat /usr/share/i18n/SUPPORTED' (eg: 'en_US.UTF-8 UTF8' or 'de_DE.UTF-8 UTF-8', 'fr_FR.UTF-8 UTF-8'...)",
    "categories": [
      "tools"
    ],
    "platform": "linux",
    "restart_policy": "unless-stopped",
    "ports": [
      "9090:8080/tcp"
    ],
    "volumes": [
      {
        "container": "/krusader",
        "bind": "/docker/krusader"
      },
      {
        "container": "/mnt/hostdisk",
        "bind": "/"
      }
    ],
    "env": [
      {
        "name": "USER_LOCALES",
        "default": "en_US.UTF-8 UTF-8",
        "label": "USER_LOCALES",
        "description": "Enter your prefered locales, you can find a full list of supported languages in: '/usr/share/i18n/SUPPORTED' simply open up a console from the Container and type in 'cat /usr/share/i18n/SUPPORTED' (eg: 'en_US.UTF-8 UTF8' or 'de_DE.UTF-8 UTF-8', 'fr_FR.UTF-8 UTF-8'...)"
      },
      {
        "name": "RUNASROOT",
        "default": "false",
        "label": "RUNASROOT",
        "description": "Set this variable to 'true' if you want to run Krusader as root to edit system files (please remember you have to also change the Data Path to edit system level files)"
      },
      {
        "name": "NOVNC_RESIZE",
        "default": "remote",
        "label": "NOVNC_RESIZE",
        "description": "Local Scaling"
      },
      {
        "name": "CUSTOM_RES_W",
        "default": "1280",
        "label": "CUSTOM_RES_W",
        "description": "Enter the preferred resolution width"
      },
      {
        "name": "CUSTOM_RES_H",
        "default": "768",
        "label": "CUSTOM_RES_H",
        "description": "Enter the preferred resolution height"
      }
    ],
    "logo": "https://raw.githubusercontent.com/ich777/docker-templates/master/ich777/images/krusader.png",
    "network_mode": "bridge",
    "type": 1
  },
  {
    "title": "Gitea",
    "name": "Gitea",
    "image": "gitea/gitea",
    "description": "Gitea: Git with a cup of tea - The goal of this project is to make the easiest, fastest, and most painless way of setting up a self-hosted Git service. Using Go, this can be done with an independent binary distribution across all platforms which Go supports, including Linux, macOS, and Windows on x86, amd64, ARM and PowerPC architectures. Want to try it before doing anything else? Do it with the online demo! This project has been forked from Gogs.",
    "categories": [
      "tools",
      "web"
    ],
    "platform": "linux",
    "restart_policy": "unless-stopped",
    "ports": [
      "2222:22/tcp",
      "3000:3000/tcp"
    ],
    "volumes": [
      {
        "container": "/data",
        "bind": "/mnt/user/appdata/gitea"
      }
    ],
    "logo": "https://raw.githubusercontent.com/fanningert/unraid-docker-templates/master/fanningert/icons/gitea.png",
    "network_mode": "bridge",
    "type": 1
  }
]